#!/usr/bin/env python3

# Copyright © 2023 Scott Court
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the “Software”), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import readline
import shlex
import configparser
import os
import atexit
import argparse

from isidore.libIsidoreCmdline import *

# Parse command line arguments
parser = argparse.ArgumentParser(prog='isidore')
parser.add_argument('command', help='An Isidore command. This command will be run and then Isidore will exit.', nargs='*')
parser.add_argument('-F', '--config', help='The Isidore config file to use instead of /etc/isidore.cfg or ~/.isidore.cfg.')
args = parser.parse_args()

# Setup Readline History
history_file = os.path.expanduser("~/.isidore_history")
try:
    readline.read_history_file(history_file)
    readline.set_history_length(1000)
except FileNotFoundError:
   pass
atexit.register(readline.write_history_file, history_file)

# Setup
#readline.parse_and_bind('set editing-mode vi')
isidore = Isidore.fromConfigFile(args.config)
cmd = IsidoreCmdline(isidore)


# Debugging: Check if readline completer is set
print("Readline completer before prompt:", readline.get_completer())

# Process command
if args.command == []:
    # No command was given on the command line arguments. Start the main loop
    # to read commands from stdin.
    cmd.prompt()
else:
    # Process the one command given on the command line arguments and exit.
    cmd.rootprompt(args.command)

# Debugging: Check if readline completer is set after prompt
print("Readline completer after prompt:", readline.get_completer())